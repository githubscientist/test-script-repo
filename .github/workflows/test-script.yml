# name: Test Script

# on:
#   push:
#     branches:
#       - main
#       - test-branch  # Specify the branches to trigger the workflow

# name: Example Workflow
# on: [push]

# jobs:
#   example-job:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Set environment variables
#         run: |
#           echo "FIRST_VAR=Hello" >> $GITHUB_ENV
#           echo "SECOND_VAR=$FIRST_VAR World" >> $GITHUB_ENV
#       - name: Print variables
#         run: echo "$FIRST_VAR $SECOND_VAR"

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Set up environment variables
#         run: |
#           echo "VAR1=value1" >> $GITHUB_ENV
#           echo "VAR2=$VAR1/additional_path" >> $GITHUB_ENV
#       - name: print
#         run: echo $VAR2

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Check out repository
#       uses: actions/checkout@v3

#     - name: Set environment variables
#       run: |
#         echo "VAR1=Hello" >> $GITHUB_ENV
#         echo "VAR2=${{ env.VAR1 }} World" >> $GITHUB_ENV

#     - name: Use environment variables
#       run: echo "VAR2 is $VAR2"
#       env:
#         VAR2: ${{ env.VAR2 }}

# jobs:
#   example-job:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up environment variables
#         run: |
#           echo "FIRST_VAR=Hello" >> $GITHUB_ENV
#           echo "SECOND_VAR=${FIRST_VAR} World" >> $GITHUB_ENV
#         env:
#           FIRST_VAR: Hello

#       - name: Display variables
#         run: |
#           echo "First: $FIRST_VAR"
#           echo "Second: $SECOND_VAR"
#         env:
#           FIRST_VAR: Hello
#           SECOND_VAR: ${{ env.FIRST_VAR }} World  # This won't work directly in `env`, illustrated for clarity

# name: Example Workflow
# on: [push]

# jobs:
#   example-job:
#     runs-on: ubuntu-latest
#     env:
#       VAR1: value1
#     steps:
#       - name: Set dependent environment variable
#         run: echo "VAR2=${VAR1}_value2" >> $GITHUB_ENV
#       - name: Print VAR2
#         run: echo $VAR2  # VAR2 will be available here

# name: Example Workflow
# on: [push]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     env:
#       FOO: foo
#     steps:
#     - name: Set and use BAR
#       run: |
#         echo "BAR=${FOO}bar" >> $GITHUB_ENV
#         echo "BAR is $BAR"  # This will not work within the same step because $GITHUB_ENV affects future steps.
#     - name: Print BAR
#       run: echo $BAR

# name: Example Workflow

# on: [push]

# env:
#   WORKFLOW_LEVEL_VAR: "Available to all jobs"

# jobs:
#   example:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Set variables
#         id: vars
#         run: |
#           echo "MY_VAR=Hello" >> $GITHUB_ENV
#           echo "ANOTHER_VAR=${MY_VAR} World" >> $GITHUB_ENV

#       - name: Use environment variables
#         run: |
#           echo $MY_VAR
#           echo $ANOTHER_VAR


# name: Example Workflow

# on: [push]

# jobs:
#   example_job:
#     runs-on: ubuntu-latest

#     env:
#       VAR1: 'Hello'
#       VAR2: '${{ env.VAR1 }} World'  # This will not work as expected
#       VAR3: ${{ env.VAR1 }} World    # This works correctly
#       VAR4: Hello World              # Direct assignment

#     steps:
#       - name: Print VAR1
#         run: echo $VAR1

#       - name: Print VAR2
#         run: echo $VAR2

#       - name: Print VAR3
#         run: echo $VAR3

#       - name: Print VAR4
#         run: echo $VAR4



























# jobs:
#   example_job:
#     runs-on: ubuntu-latest
#     env:
#       VAR_ONE: "value1"
#     steps:
#       - name: Step with variables
#         run: |
#           VAR_TWO="This will work: $VAR_ONE"  # Expands during execution
#           echo "VAR_TWO=$VAR_TWO" >> $GITHUB_ENV
    
#       - name: Print VAR_TWO
#         run: |
#             echo "VAR_TWO is: $VAR_TWO"




# jobs:
#   build:
#     runs-on: ubuntu-latest
#     env:
#       VAR1: "Hello"
#     steps:
#       - name: Use the environment variable in a step
#         env:
#           VAR2: "DYNAMIC ${VAR1}"
#         run: echo $VAR2
#       - name: Print
#         run: echo $VAR2

# jobs:
#   build:
#     env:
#       BASE_URL: https://example.com
#       API_VERSION: v1
#       API_URL: ${{ env.BASE_URL }}/api/${{ env.API_VERSION }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Print API URL
#         run: echo $API_URL


# name: Example Workflow

# on: [push]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Set Environment Variables
#         id: set_envs
#         run: |
#           echo "VAR_ONE=Hello" >> $GITHUB_ENV
#           echo "VAR_TWO=${{ env.VAR_ONE }} World" >> $GITHUB_ENV

#       - name: Use the variables
#         run: echo "${{ env.VAR_ONE }} and ${{ env.VAR_TWO }}"

# name: Example Conditional Vars

# on: [push]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Set initial environment variable
#         id: init
#         run: echo "VAR_ONE=Hello" >> $GITHUB_ENV

#       - name: Conditionally set another variable
#         id: conditional
#         run: |
#           if [ "$VAR_ONE" == "Hello" ]; then
#             echo "VAR_TWO=${VAR_ONE} World" >> $GITHUB_ENV
#           fi

#       - name: Use environment variables
#         run: echo "VAR_ONE is ${{ env.VAR_ONE }} and VAR_TWO is ${{ env.VAR_TWO }}"

# name: Example using environment variables

# on: [push]

# env:
#   GLOBAL_ENV: "global_value"  # Global scope

# jobs:
#   example_job:
#     runs-on: ubuntu-latest
#     env:
#       VAR_ONE: "value1"
#     steps:
#       - name: Step with variables
#         run: |
#           VAR_TWO="This will work: $VAR_ONE"  # Expands during execution
#           echo "VAR_TWO=$VAR_TWO" >> $GITHUB_ENV

# jobs:
#   example:
#     runs-on: ubuntu-latest
#     env:
#       BASE_URL: 'https://example.com'
#     steps:
#       - name: Set variables
#         id: vars
#         run: echo "URL=${BASE_URL}/path" >> $GITHUB_ENV

#       - name: Use the variable
#         run: echo "The URL is $URL"

# jobs:
#   example:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Set base URL
#         id: set_base_url
#         run: echo "BASE_URL=https://example.com" >> $GITHUB_ENV

#       - name: Set derived URL
#         id: set_derived_url
#         run: echo "FULL_URL=${{ env.BASE_URL }}/path" >> $GITHUB_ENV

#       - name: Use composed URL
#         run: echo "The full URL is $FULL_URL"

# name: Example Workflow

# on:
#   push:
#     branches:
#       - main
#       - test-branch

# env:
#   BASE_URL: "https://example.com"
#   API_KEY: "your_api_key_here"
#   FULL_URL: "${{ env.BASE_URL }}/api"

# jobs:
#   example_job:
#     runs-on: ubuntu-latest

#     env:
#       FULL_URL: "${{ env.FULL_URL }}"  # Use the previously defined environment variable here

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Display Full URL
#         run: echo "Full URL is $FULL_URL"

#       # Add more steps as needed...
# name: Example Workflow

# on: [push]

# jobs:
#   build:
#     runs-on: ubuntu-latest
    
#     env:
#       VAR1: value1
#       VAR2: ${{ env.VAR1 }}-suffix # This will not work directly

#     steps:
#       - name: Set up VAR2
#         run: echo "VAR2=${{ env.VAR1 }}-suffix" >> $GITHUB_ENV
      
#       - name: Check environment variables
#         run: |
#           echo "VAR1 is $VAR1"
#           echo "VAR2 is $VAR2"
#         env:
#           VAR1: ${{ env.VAR1 }}
#           VAR2: ${{ env.VAR2 }} # This will use the value set in the previous step


# name: Example Workflow

# on: [push]

# jobs:
#   example_job:
#     runs-on: ubuntu-latest

#     env:
#       VAR1: 'Hello'
#       VAR2: '${{ env.VAR1 }} World'  # This will not work as expected
#       VAR3: ${{ env.VAR1 }} World    # This works correctly
#       VAR4: Hello World              # Direct assignment

#     steps:
#       - name: Print VAR1
#         run: echo $VAR1

#       - name: Print VAR2
#         run: echo $VAR2

#       - name: Print VAR3
#         run: echo $VAR3

#       - name: Print VAR4
#         run: echo $VAR4

# name: Example Workflow

# on: [push]

# jobs:
#   build:
#     runs-on: ubuntu-latest
    
#     env:
#       VAR1: value1
#       VAR2: ${{ env.VAR1 }}-suffix # This will not work directly

#     steps:
#       - name: Set up VAR2
#         run: echo "VAR2=${{ env.VAR1 }}-suffix" >> $GITHUB_ENV
      
#       - name: Check environment variables
#         run: |
#           echo "VAR1 is $VAR1"
#           echo "VAR2 is $VAR2"
#         env:
#           VAR1: ${{ env.VAR1 }}
#           VAR2: ${{ env.VAR2 }} # This will use the value set in the previous step

name: Example Workflow
on: [push]

jobs:
  example-job:
    runs-on: ubuntu-latest
    env:
      BASE_URL: "https://example.com"
    steps:
      - name: Set derived environment variable
        run: |
          FULL_URL="${BASE_URL}/path"
          echo "FULL_URL=$FULL_URL" >> $GITHUB_ENV
      - name: Use derived environment variable
        run: echo "The full URL is $FULL_URL"



